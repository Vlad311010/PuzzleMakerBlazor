@rendermode InteractiveServer
@inject ILogger<NavMenu> Logger
@inject PuzzleDataManager PuzzleManager
@inject NavigationManager Navigation


<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <span class="navbar-brand">PuzzleMaker1.0</span>
        <div class="collapse navbar-collapse" id="navbarNav">
            <EditForm Model="Model" OnValidSubmit="Submit" FormName="generation-parameters-form">
                <DataAnnotationsValidator />
                <p class="navbar-nav">
                        <label for="Seed" class="nav-link active">
                        <span @onclick="OnShowOriginalClick"
                              class="btn btn-outline-secondary btn me-2 @GetCssForShowOriginalBtn()"
                              style="width:130px"
                        >
                            Show Original
                        </span>
                        </label>

                        <span class="d-flex" style="width:15%">
                            <label for="Seed" class="nav-link active">
                                Seed:
                                <InputNumber TValue="int" autocomplete="off" @bind-Value="Model!.Seed" class="form-control-sm w-50 me-2" placeholder="Seed" id="Seed" />
                            </label>
                        </span>

                        <span class="d-flex" style="width:20%">
                            <label for="sizeR" class="nav-link active">
                                Puzzle Size:
                                <InputNumber TValue="int?" EnableMinMax="true" Min="2" id="sizeR" @bind-Value="Model!.Rows" autocomplete="off" class="form-control-sm w-25" placeholder="R" />
                                ×
                                <InputNumber TValue="int?" EnableMinMax="true" Min="2" @bind-Value="Model!.Columns" autocomplete="off" class="form-control-sm w-25" placeholder="C" />
                            </label>
                        </span>

                        <span class="d-flex" style="width:20%">
                            <label for="Resize" class="nav-link active">
                                Scale:
                                <InputNumber TValue="float" step="0.05" EnableMinMax="true" Min="0" Max="1" autocomplete="off" @bind-Value="Model!.Scale" id="Resize" class="form-control-sm w-50 me-1" placeholder="0-1" />
                            </label>
                        </span>

                        <span class="d-flex nav-link" style="width:35%">
                            <label for="formFile" class="nav-link active me-2">Image:</label>
                            <InputFile OnChange="OnImageChange" class="@GetFIleInputCss()" type="file" id="formFile" />
                            
                            @if (canInitiateRequest) 
                            {
                                <button class="btn btn-outline-success h-100 me-2" type="submit" style="width:37%">Create</button>
                            }
                            else
                            {
                                <button class="btn btn-outline-success h-100 me-2 disabled" type="submit" style="width:37%">
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                </button>
                            }
                            <span @onclick="OnReset" autocomplete="off" class="btn btn-outline-warning">Reset</span>
                        </span>
                </p>
            </EditForm>
        </div>
    </div>    
</nav>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="text-bg-danger text-center">
        <span class="">Error: @(errorMessage)</span>
    </div>
}


<span class="@(!showPreviewImage ? "Hidden" : "")"> 
    <ImagePreview imageSrc="@Model!.Image" />
</span>


@code {
    [SupplyParameterFromForm]
    private Models.PuzzleGenerationParameters? Model { get; set; }

    private bool showPreviewImage = false;
    private bool canInitiateRequest = true;
    private string errorMessage = string.Empty;

    protected override void OnInitialized() 
    {
        Model ??= new();
    }

    private async void Submit()
    {
        canInitiateRequest = false;
        errorMessage = string.Empty;
        try
        {
            await PuzzleManager.SwitchPuzzleDataProvider(Model!, PuzzleDataProviderAPI.CreatePuzzleDataProvider);
        }
        catch (HttpRequestException e)
        {
            errorMessage = e.Message;
        }
        finally
        {
            canInitiateRequest = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnImageChange(InputFileChangeEventArgs e)
    {
        Model!.Image = e.File;
    }

    private string GetFIleInputCss()
    {
        var fieldIdentifier = new FieldIdentifier(Model!, "Image");
        string classes = "form-control me-2 form-control-sm";
        return ((Models.PuzzleGenerationParameters)(fieldIdentifier.Model)).Image == null ? classes + " invalid" : classes;
    }

    private void OnShowOriginalClick()
    {
        showPreviewImage = !showPreviewImage;
    }

    private void OnReset()
    {
        Navigation.NavigateTo(Navigation.Uri, true);
    }

    private string GetCssForShowOriginalBtn()
    {
        if (Model!.Image == null)
            return "disabled";
        else if (showPreviewImage)
            return "active";
        else
            return string.Empty;
    }

}