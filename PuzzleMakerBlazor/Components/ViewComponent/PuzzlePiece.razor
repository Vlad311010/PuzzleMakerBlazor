@rendermode InteractiveServer
@using Microsoft.Extensions.Logging
@using PuzzleMakerBlazor.Models
@using System.ComponentModel
@inject IJSRuntime JS
@inject PuzzleDataManager PuzzleDataManager
@implements IDisposable

<Draggable OnDragCallback="@OnDrag" OnDragEndCallback="@OnDragEnd" startX="posX" startY="posY" >
    <img @ref=imageTag class="@(highlight ? "PuzzlePieceBorderHighlight" : "")" draggable="true"
         src=@(src) 
    />
</Draggable>


@code {

    [Parameter, EditorRequired]
    public int indexRow { get; set; } = -1;
    [Parameter, EditorRequired]
    public int indexColumn { get; set; } = -1;
    [Parameter, EditorRequired]
    public string imagePath { get; set; } = "";
    [Parameter, EditorRequired]
    public PuzzleController PuzzleController { get; set; }
    [Parameter]
    public bool base64Format { get; set; } = true;


    private ElementReference imageTag;
    private PieceIndex index = new ValueTuple<int, int>(-1, -1);
    private string src = String.Empty;

    // state
    private int posX = 0;
    private int posY = 0;
    private bool highlight = false;


    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        index = new ValueTuple<int, int>(indexRow, indexColumn);
        posX = PuzzleController.GetPiece(index).Position.x;
        posY = PuzzleController.GetPiece(index).Position.y;
        src = base64Format ? "data:image/png;base64," + imagePath : imagePath;
    }

    protected override void OnInitialized()
    {
        Models.PuzzlePiece puzzlePiece = PuzzleController.GetPiece(new ValueTuple<int, int>(indexRow, indexColumn));
        puzzlePiece.PropertyChanged += OnModelChange;
    }

    public void Dispose()
    {
        Models.PuzzlePiece puzzlePiece = PuzzleController.GetPiece(new ValueTuple<int, int>(indexRow, indexColumn));
        puzzlePiece.PropertyChanged -= OnModelChange;
    }

    private async void OnModelChange(object? sender, PropertyChangedEventArgs e)
    {
        posX = PuzzleController.GetPiece(index).Position.x;
        posY = PuzzleController.GetPiece(index).Position.y;
        await InvokeAsync(StateHasChanged);
    }    

    public void OnDrag(int x, int y)
    {
        highlight = PuzzleController.CanBeConnected(index);
        SetPosition(x, y);
    }

    public void OnDragEnd(int x, int y)
    {
        highlight = false;
        PuzzleController.OnPieceDown(index);
    }

    public void OnDragCancel(int x, int y)
    {
        highlight = false;
    }

    private void SetPosition(int x, int y)
    {
        PuzzleController.SetPiecePosition(index, x, y);
    }

}
